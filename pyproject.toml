[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "adaptive-bayesian-driver"
version = "0.2.0"
description = "LC-NE inspired adaptive Bayesian learning for autonomous driving"
authors = [{name = "Azriel Ghadooshahy", email = "azriel.ghadooshahy@example.com"}]
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
keywords = ["machine-learning", "bayesian", "autonomous-driving", "neuroscience", "cuda"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "torch>=2.2.0,<2.4.0",
    "torchvision>=0.17.0,<0.19.0",
    "numpy>=1.24.0,<1.27.0",
    "matplotlib>=3.6.0,<3.9.0",
    "pillow>=9.0.0,<11.0.0",
    "pyyaml>=6.0.0,<7.0.0",
    "tqdm>=4.66.0,<5.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0,<9.0.0",
    "pytest-cov>=5.0.0,<6.0.0",
    "ruff>=0.4.4,<0.5.0",
    "mypy>=1.10.0,<2.0.0",
    "pre-commit>=3.7.0,<4.0.0",
]

cuda = [
    "cupy-cuda12x>=12.0.0,<13.0.0",
]

production = [
    "mlflow>=2.13.0,<3.0.0",
    "hydra-core>=1.3.0,<2.0.0",
    "wandb>=0.17.0,<1.0.0",
    "fastapi>=0.111.0,<1.0.0",
    "uvicorn[standard]>=0.29.0,<1.0.0",
    "onnx>=1.16.0,<2.0.0",
    "onnxruntime-gpu>=1.18.0,<2.0.0",
]

[project.scripts]
adaptive-demo = "adaptive_bayesian_driver.main:main"
adaptive-train = "adaptive_bayesian_driver.applications.training:main"

[tool.ruff]
line-length = 88
target-version = "py311"
select = ["E", "F", "I", "N", "W", "UP", "B", "C4", "SIM", "TCH"]
ignore = ["E501", "N803", "N806", "B008", "UP007"]
exclude = [".git", "__pycache__", "build", "dist", ".eggs", "_chatbot"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

[tool.ruff.isort]
known-first-party = ["adaptive_bayesian_driver"]
force-single-line = false

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
exclude = ["_chatbot/", "build/", "dist/", "tests/"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=adaptive_bayesian_driver",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-fail-under=80"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests as requiring GPU",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["adaptive_bayesian_driver"]
omit = ["*/tests/*", "*/_chatbot/*", "*/setup.py", "*/demo.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\$$:",
    "@(abc\\.)?abstractmethod",
]
"Bug Reports" = "https://github.com/yourusername/adaptive-bayesian-driver/issues"

[tool.ruff]
line-length = 88
target-version = "py311"
select = ["E", "F", "I", "N", "W", "UP"]
ignore = ["E501", "N803", "N806"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = ["--strict-markers", "--strict-config", "--cov=adaptive_bayesian_driver"]
